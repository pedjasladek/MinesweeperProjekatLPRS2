/*
 * Copyright (c) 2009-2012 Xilinx, Inc.  All rights reserved.
 *
 * Xilinx, Inc.
 * XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
 * COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
 * ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR
 * STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION
 * IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE
 * FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.
 * XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO
 * THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO
 * ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE
 * FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 */

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 *
 *
 *.
 *.
 */

#include <stdio.h>
#include "platform.h"
#include "xparameters.h"
#include "xio.h"
#include "xil_exception.h"
#include "vga_periph_mem.h"
#include "minesweeper_sprites.h"
#include <stdlib.h>     /* srand, rand */
#include <time.h>
#define UP 0b01000000
#define DOWN 0b00000100
#define LEFT 0b00100000
#define RIGHT 0b00001000
#define CENTER 0b00010000
#define SW0 0b00000001
#define SW1 0b00000010
#define FOUR 4
#define MAX 6

int brojac = 0;
int brojac1 = 0;		//X pozicija gde ce se nacrtati znak u levim poljima
int brojac2 = 0;		//Y pozicija gde ce se nacrtati znak u levim poljima
int brojac3 = 0;		//Brojac za leva 24 polja
int brojac4 = 0;
int finish_itterator = 0;


int endOfGame;
int i, x, y, ii, oi, R, G, B, RGB, column, row;

int m = 0;
int k = 0;
int j = 0;

char temp_array[4];
int resenje_niz_temp[4];
int z = 0;

int Zute = 0;
int Crvene = 0;
int Crvene_temp = 0;

int draw_crvene = 0;
int draw_zute = 0;
int p=0;
int resenje_niz[4];

int colors_itteratorX = 5;
int colors_itteratorY = 0;


void drawMap(int in_x, int in_y, int out_x, int out_y, int width, int height) {
	int ox, oy, oi, iy, ix, ii;
	for (y = 0; y < height; y++) {
		for (x = 0; x < width; x++) {
			ox = out_x + x;
			oy = out_y + y;
			oi = oy * 320 + ox;
			ix = in_x + x;
			iy = in_y + y;
			ii = iy * gimp_image.width + ix;
			R = gimp_image.pixel_data[ii * gimp_image.bytes_per_pixel] >> 5;
			G = gimp_image.pixel_data[ii * gimp_image.bytes_per_pixel + 1] >> 5;
			B = gimp_image.pixel_data[ii * gimp_image.bytes_per_pixel + 2] >> 5;
			R <<= 6;
			G <<= 3;
			RGB = R | G | B;

			VGA_PERIPH_MEM_mWriteMemory(
					XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR + GRAPHICS_MEM_OFF + oi * 4,
					RGB);
		}
	}

}

// Drawing cursor for indicating position

void drawingCursor(int startX, int startY, int endX, int endY) {

	for (x = startX; x < endX; x++) {
		for (y = startY; y < startY + 1; y++) {
			i = y * 320 + x;
			VGA_PERIPH_MEM_mWriteMemory(
					XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR + GRAPHICS_MEM_OFF + i * 4,
					0x000000);
		}
	}

	for (x = startX; x < endX; x++) {
		for (y = endY - 1; y < endY; y++) {
			i = y * 320 + x;
			VGA_PERIPH_MEM_mWriteMemory(
					XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR + GRAPHICS_MEM_OFF + i * 4,
					0x000000);
		}
	}

	for (x = startX; x < startX + 1; x++) {
		for (y = startY; y < endY; y++) {
			i = y * 320 + x;
			VGA_PERIPH_MEM_mWriteMemory(
					XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR + GRAPHICS_MEM_OFF + i * 4,
					0x000000);
		}
	}

	for (x = endX - 1; x < endX; x++) {
		for (y = startY; y < endY; y++) {
			i = y * 320 + x;
			VGA_PERIPH_MEM_mWriteMemory(
					XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR + GRAPHICS_MEM_OFF + i * 4,
					0x000000);
		}
	}

}



int generateRandom(int l, int u)
{
	int r = rand() % ((u - l) + 1);
	r = l + r;

	return r * 16;
}



//	Function that controls movement of cursor

void move() {

	typedef enum {
		IDLE, LEFT_PRESSED, RIGHT_PRESSED, CENTER_PRESSED
	} state_t;

	int startX = 105, startY = 61, endX = 119, endY = 75;
	int oldStartX, oldEndX;
	int i = 0;

	for (i = 0; i < FOUR; i++)
	{
		resenje_niz[i] = generateRandom(0, 5);
		drawMap(resenje_niz[i], 0, 60 + m, 40, 16, 16);
		m += 16;
	}

	state_t state = IDLE;
	state_t btn_old_state = IDLE;

	drawingCursor(startX, startY, endX, endY);

	while (endOfGame != 1) {

		if ((Xil_In32(XPAR_MY_PERIPHERAL_0_BASEADDR) & RIGHT) == 0) {
			state = RIGHT_PRESSED;
		} else if ((Xil_In32(XPAR_MY_PERIPHERAL_0_BASEADDR) & LEFT) == 0) {
			state = LEFT_PRESSED;
		} else if ((Xil_In32(XPAR_MY_PERIPHERAL_0_BASEADDR) & CENTER) == 0) {
			state = CENTER_PRESSED;
		} else {
			state = IDLE;
		}

		if (state != btn_old_state) {



			switch (state) {

			case IDLE:
				break;

			case LEFT_PRESSED:

				if (startX > 117) {

					oldStartX = startX;
					startX -= 16;
					endX -= 16;
					brojac -= 16;

					drawingCursor(startX, startY, endX, endY);
					drawMap(oldStartX - 105, 0, oldStartX - 1, startY - 1, 16,
							16);
				}

				break;

			case RIGHT_PRESSED:

				if (endX < 187) {
					oldStartX = startX;
					oldEndX = endX;
					startX += 16;
					endX += 16;
					brojac += 16;

					drawingCursor(startX, startY, endX, endY);
					drawMap(oldStartX - 105, 0, oldStartX - 1, startY - 1, 16,
							16);

				}
				break;

			case CENTER_PRESSED:


				if(brojac1 < 64){

					srand ((unsigned)time(NULL));

					drawMap(brojac, 0, 80 + brojac1 * 16, 80 + brojac2 * 16, 16, 16);
					temp_array[k] = brojac;
					k++;
					brojac3++;



					if (brojac == 0)
						temp_array[k] = '0';
					else if (brojac == 16)
						temp_array[k] = '1';
					else if (brojac == 32)
						temp_array[k] = '2';
					else if (brojac == 48)
						temp_array[k] = '3';
					else if (brojac == 64)
						temp_array[k] = '4';
					else if (brojac == 80)
						temp_array[k] = '5';



					brojac1++;

					if (brojac1 == 4) {

						int it, pt, xt;
						int skip[FOUR] = { 0 };
						int whiteSkip[FOUR] = { 0 };

						// row Loop, sets indexes to skip
						for (it = 0; it < FOUR; it++) {
							if (resenje_niz[it] == temp_array[it]) {
								Crvene += 1;
								skip[it] = 1;
								whiteSkip[it] = 1;
							}
						}

						for (pt = 0; pt < FOUR; pt++) {
							if (skip[pt]) // Skipping those marked as row
							{
								continue;
							}

							for (xt = 0; xt < FOUR; xt++) {
								if (whiteSkip[xt]) // Skiping those marked as white
								{
									continue;
								} else if (temp_array[pt] == resenje_niz[xt]) // Finds whites
										{
									//White found
									Zute += 1;
									whiteSkip[xt] = 1;
									skip[pt] = 1;
									break;
								}
							}
						}


						Crvene_temp = Crvene;
						draw_crvene = Crvene + 5;

						while(Crvene > 0){



							for(colors_itteratorX; colors_itteratorX < draw_crvene; colors_itteratorX++){
								drawMap(96, 0, 80 + colors_itteratorX * 16, 80 + colors_itteratorY * 16, 16, 16);
								Crvene--;
							}

						}

						draw_zute = Zute + draw_crvene;


						while(Zute > 0){

							for(colors_itteratorX; colors_itteratorX < draw_zute; colors_itteratorX++){
								drawMap(112, 0, 80 + colors_itteratorX * 16, 80 + colors_itteratorY * 16, 16, 16);
								Zute--;
							}

						}

						if (brojac3 == 24 || Crvene_temp == 4) {
							endOfGame = 1;
							for (column = 7; column < 8; column++) {
								for (row = 0; row < 4;
										row++, finish_itterator++) {
									drawMap(resenje_niz[finish_itterator], 0,
											80 + row * 16, 80 + column * 16, 16,
											16);
								}
							}
						}

						k = 0;
						i = 0;
						Crvene = 0;
						Crvene_temp = 0;
						Zute = 0;
						brojac4 = 0;
						brojac1 = 0;
						brojac2++;
						colors_itteratorX = 5;
						colors_itteratorY++;
					}

				}

				break;
			}
		}
		btn_old_state = state;
	}
}



int main() {

	init_platform();

	//black background+
	for (x = 0; x < 320; x++) {
		for (y = 0; y < 240; y++) {
			i = y * 320 + x;
			VGA_PERIPH_MEM_mWriteMemory(
					XPAR_VGA_PERIPH_MEM_0_S_AXI_MEM0_BASEADDR + GRAPHICS_MEM_OFF + i * 4,
					0x0f0f0f);
		}
	}

	//drawing a map (LEFT FIELDS)

	for (row = 0; row < 6; row++) {
		for (column = 0; column < 4; column++) {
			drawMap(128, 0, 80 + column * 16, 80 + row * 16, 16, 16);
		}
	}

	//drawing a map (RIGHT FIELDS)

	for (row = 0; row < 6; row++) {
		for (column = 5; column < 9; column++) {
			drawMap(128, 0, 80 + column * 16, 80 + row * 16, 16, 16);
		}
	}

	//drawing a map (TOP FIELDS)
	int i = 0;
	for (column = 0; column < 6; column++) {
		drawMap(i, 0, 88 + 16 + column * 16, 60, 16, 16);
		i += 16;
	}

	//drawing a map (BLANK FIELDS BETWEEN LEFT FIELDS AND FINAL LINE)

	for (row = 7; row < 8; row++) {
		for (column = 0; column < 4; column++) {
			drawMap(128, 0, 80 + column * 16, 80 + row * 16, 16, 16);
		}
	}

	move();

	cleanup_platform();

	return 0;
}
